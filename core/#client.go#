package core


import (
	"io"
	sio "silk/io"
	"silk/net"
	"silk/run"
)


// ----------------------------------------------------------------------------


type Client interface {
	io.Closer

	Run(string, []string) ProcessGroup
	RunWith(string, []string, *run.ProcessOptions) ProcessGroup
}


func NewClient(target net.Route) Client {
	return NewClientWith(target, nil)
}

func NewClientWith(target net.Route, opts *ClientOptions) Client {
	if opts == nil {
		opts = &ClientOptions{}
	}

	if opts.Log == nil {
		opts.Log = sio.NewNopLogger()
	}

	return newClient(target, opts)
}


type ClientOptions struct {
	Log sio.Logger
}


type ProcessGroup interface {
	Process() <-chan Process
	Err() error
}

type Process interface {
	run.Process
}


// ----------------------------------------------------------------------------


type client struct {
	log sio.Logger
	target net.Route
}

func newClient(target net.Route, opts *ClientOptions) *client {
	var this client

	this.log = opts.Log
	this.target = target

	return &this
}
